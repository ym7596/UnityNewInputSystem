//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/dduRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DduRInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DduRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""dduRInput"",
    ""maps"": [
        {
            ""name"": ""dduRAction"",
            ""id"": ""26466b11-52ab-4ed5-b2b6-c635215fc9eb"",
            ""actions"": [
                {
                    ""name"": ""Tab"",
                    ""type"": ""Button"",
                    ""id"": ""19406341-77c6-4131-97a1-14881203d5f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""6837b8be-7010-45bf-8b9f-1c5779542c1e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""f93577c6-613a-47ed-808b-81002a0786ff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch"",
                    ""type"": ""Value"",
                    ""id"": ""5c8db98d-b863-47b9-a8aa-8f92c55e3570"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b7d5210-5531-47c8-8938-758176d85af3"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b664f06-605b-4896-ac5c-c948e5a1f20a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d1b2531-e504-4600-8b03-285088e3cdc4"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13303c95-b8a5-4a74-8f75-0ced32d20f29"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""222bd01d-5e50-4cdf-a103-e8beade433e8"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b1b27e7-3990-4e13-941a-1faeda4fcff3"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // dduRAction
        m_dduRAction = asset.FindActionMap("dduRAction", throwIfNotFound: true);
        m_dduRAction_Tab = m_dduRAction.FindAction("Tab", throwIfNotFound: true);
        m_dduRAction_Drag = m_dduRAction.FindAction("Drag", throwIfNotFound: true);
        m_dduRAction_Position = m_dduRAction.FindAction("Position", throwIfNotFound: true);
        m_dduRAction_Pinch = m_dduRAction.FindAction("Pinch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // dduRAction
    private readonly InputActionMap m_dduRAction;
    private List<IDduRActionActions> m_DduRActionActionsCallbackInterfaces = new List<IDduRActionActions>();
    private readonly InputAction m_dduRAction_Tab;
    private readonly InputAction m_dduRAction_Drag;
    private readonly InputAction m_dduRAction_Position;
    private readonly InputAction m_dduRAction_Pinch;
    public struct DduRActionActions
    {
        private @DduRInput m_Wrapper;
        public DduRActionActions(@DduRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tab => m_Wrapper.m_dduRAction_Tab;
        public InputAction @Drag => m_Wrapper.m_dduRAction_Drag;
        public InputAction @Position => m_Wrapper.m_dduRAction_Position;
        public InputAction @Pinch => m_Wrapper.m_dduRAction_Pinch;
        public InputActionMap Get() { return m_Wrapper.m_dduRAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DduRActionActions set) { return set.Get(); }
        public void AddCallbacks(IDduRActionActions instance)
        {
            if (instance == null || m_Wrapper.m_DduRActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DduRActionActionsCallbackInterfaces.Add(instance);
            @Tab.started += instance.OnTab;
            @Tab.performed += instance.OnTab;
            @Tab.canceled += instance.OnTab;
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Pinch.started += instance.OnPinch;
            @Pinch.performed += instance.OnPinch;
            @Pinch.canceled += instance.OnPinch;
        }

        private void UnregisterCallbacks(IDduRActionActions instance)
        {
            @Tab.started -= instance.OnTab;
            @Tab.performed -= instance.OnTab;
            @Tab.canceled -= instance.OnTab;
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Pinch.started -= instance.OnPinch;
            @Pinch.performed -= instance.OnPinch;
            @Pinch.canceled -= instance.OnPinch;
        }

        public void RemoveCallbacks(IDduRActionActions instance)
        {
            if (m_Wrapper.m_DduRActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDduRActionActions instance)
        {
            foreach (var item in m_Wrapper.m_DduRActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DduRActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DduRActionActions @dduRAction => new DduRActionActions(this);
    public interface IDduRActionActions
    {
        void OnTab(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnPinch(InputAction.CallbackContext context);
    }
}
